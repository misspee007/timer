{"version":3,"sources":["App.js","index.js"],"names":["padTime","time","toString","padStart","App","useState","title","setTitle","timeLeft","setTimeLeft","isRunning","setIsRunning","isPaused","setIsPaused","intervalRef","useRef","resetTimer","clearInterval","current","min","Math","floor","sec","className","onClick","setInterval","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sJAGA,SAASA,EAAQC,GACf,OAAOA,EAAKC,WAAWC,SAAS,EAAG,KAGtB,SAASC,IAAO,IAAD,EACFC,mBAAS,4BADP,mBACrBC,EADqB,KACdC,EADc,OAEIF,mBAAS,MAFb,mBAErBG,EAFqB,KAEXC,EAFW,OAGMJ,oBAAS,GAHf,mBAGrBK,EAHqB,KAGVC,EAHU,OAIIN,oBAAS,GAJb,mBAIrBO,EAJqB,KAIXC,EAJW,KAMtBC,EAAcC,iBAAO,MA6B3B,SAASC,IACPC,cAAcH,EAAYI,SAC1BJ,EAAYI,QAAU,KACtBX,EAAS,aACTE,EAAY,MACZE,GAAa,GACbE,GAAY,GAGd,IAAMM,EAAMnB,EAAQoB,KAAKC,MAAMb,EAAW,KACpCc,EAAMtB,EAAQQ,EAAiB,GAANW,GAE/B,OACE,yBAAKI,UAAU,OACb,4BAAKjB,GAEL,yBAAKiB,UAAU,SACb,8BAAOJ,GACP,mCACA,8BAAOG,IAGT,yBAAKC,UAAU,YACXb,GAAa,4BAAQc,QAlD7B,WAC8B,OAAxBV,EAAYI,UAEhBX,EAAS,wBACTI,GAAa,GAEbG,EAAYI,QAAUO,aAAY,WAChChB,GAAY,SAACD,GACX,OAAIA,GAAY,EAAUA,EAAW,GAErCQ,IACO,QAER,QAqCgB,SACdN,GAAa,4BAAQc,QAnC5B,WAC8B,OAAxBV,EAAYI,UAEhBD,cAAcH,EAAYI,SAC1BJ,EAAYI,QAAU,KACtBX,EAAS,eAETI,GAAa,GACbE,GAAY,MA2BM,QACbD,GAAY,4BAAQY,QAASR,GAAjB,WC/DrBU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.f50ccf5c.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './App.css';\r\n\r\nfunction padTime(time) {\r\n  return time.toString().padStart(2, '0');\r\n}\r\n\r\nexport default function App() {\r\n  const [title, setTitle] = useState('Let the countdown begin!');\r\n  const [timeLeft, setTimeLeft] = useState(30 * 60);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n\r\n  const intervalRef = useRef(null);\r\n\r\n  function startTimer() {\r\n    if (intervalRef.current !== null) return; //prevents another interval from being created if start is pressed while timer is still running\r\n\r\n    setTitle('You are doing great!');\r\n    setIsRunning(true);\r\n\r\n    intervalRef.current = setInterval(() => {\r\n      setTimeLeft((timeLeft) => {\r\n        if (timeLeft >= 1) return timeLeft - 1;\r\n\r\n        resetTimer();\r\n        return 0;\r\n      });\r\n    }, 1000);\r\n  }\r\n\r\n  function stopTimer() {\r\n    if (intervalRef.current === null) return;\r\n\r\n    clearInterval(intervalRef.current);\r\n    intervalRef.current = null;\r\n    setTitle('Keep it up!');\r\n\r\n    setIsRunning(false);\r\n    setIsPaused(true);\r\n  }\r\n\r\n  function resetTimer() {\r\n    clearInterval(intervalRef.current);\r\n    intervalRef.current = null;\r\n    setTitle('Go again?');\r\n    setTimeLeft(30 * 60);\r\n    setIsRunning(false);\r\n    setIsPaused(false);\r\n  }\r\n\r\n  const min = padTime(Math.floor(timeLeft / 60));\r\n  const sec = padTime(timeLeft - min * 60);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"timer\">\r\n        <span>{min}</span>\r\n        <span>:</span>\r\n        <span>{sec}</span>\r\n      </div>\r\n\r\n      <div className=\"buttons\">\r\n        {!isRunning && <button onClick={startTimer}>Start</button>}\r\n        {isRunning && <button onClick={stopTimer}>Stop</button>}\r\n        {isPaused && <button onClick={resetTimer}>Reset</button>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}